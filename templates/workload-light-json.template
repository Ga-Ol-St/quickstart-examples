{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This workload template deploys an ASG behind an ELB load balancer in two private subnets. The cluster is configured to use an S3 bucket for storage **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "BastionSecurityGroupID",
                        "WorkloadInstanceType"
                    ]
                }
            ],
            "ParameterLabels": {
                "BastionSecurityGroupID": {
                    "default": "Bastion Security Group ID"
                },
                "KeyPairName": {
                    "default": "SSH Key Name"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 ID"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "WorkloadInstanceType": {
                    "default": "Workload Servers Instance Type"
                }
            }
        }
    },
    "Parameters": {
        "BastionSecurityGroupID": {
            "Description": "ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair. All instances will launch with this key pair.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        },
        "WorkloadInstanceType": {
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "r3.xlarge",
                "r3.2xlarge",
                "c4.xlarge",
                "r4.xlarge",
                "r4.2xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m3.large",
            "Description": "Type of EC2 instance for the Workload instances",
            "Type": "String"
        }


    },
    "Rules": {
        "KeyPairsNotEmpty": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::EachMemberEquals": [
                                    {
                                        "Fn::RefAll": "AWS::EC2::KeyPair::KeyName"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "All key pair parameters must not be empty"
                }
            ]
        },
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "us-east-1"      : { "64" : "ami-0252ea35e8fa91821"},
            "us-east-2"      : { "64" : ""},
            "us-west-1"      : { "64" : ""},
            "us-west-2"      : { "64" : ""},
            "ca-central-1"   : { "64" : ""},
            "eu-central-1"   : { "64" : ""},
            "eu-west-1"      : { "64" : ""},
            "eu-west-2"      : { "64" : ""},
            "eu-west-3"      : { "64" : ""},
            "ap-southeast-1" : { "64" : ""},
            "ap-southeast-2" : { "64" : ""},
            "ap-south-1"     : { "64" : ""},
            "ap-northeast-1" : { "64" : ""},
            "ap-northeast-2" : { "64" : ""},
            "sa-east-1"      : { "64" : ""}
        }
    },
    "Resources": {
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "WorkloadSetup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    ""
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "JRSRolePolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "rds:Describe*",
                                        "rds:AuthorizeDBSecurityGroupIngress",
                                        "rds:CreateDBSecurityGroup",
                                        "rds:RevokeDBSecurityGroupIngress",
                                        "rds:ModifyDBInstance",
                                        "redshift:Describe*",
                                        "redshift:AuthorizeClusterSecurityGroupIngress",
                                        "redshift:CreateClusterSecurityGroup",
                                        "redshift:RevokeClusterSecurityGroupIngress",
                                        "redshift:ModifyCluster",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:RevokeSecurityGroupIngress",
                                        "sqs:*",
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },
        "WorkloadInstance": {
            "Type": "AWS::EC2::Instance",
            "Version": "2018-11-20",
            "Properties": {
                "InstanceInitiatedShutdownBehavior" : "stop",
                "ImageId": {"Fn::FindInMap" : [ "AWSAMIRegionMap", { "Ref" : "AWS::Region" }, "64" ]},
                "InstanceType": { "Ref" : "WorkloadInstanceType" },
                "KeyName" : { "Ref" : "KeyPairName" },
                "Monitoring": "false",
                "DisableApiTermination": "false",
                "SecurityGroupIds": [{ "Ref": "WorkloadSecurityGroup"}],
                "SubnetId" : {"Ref": "PublicSubnet1ID" }
            }
        },
        "WorkloadSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Workload instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "-1",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "-1",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        }
                    }
                ]
            }
        },


        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {

                "AccessControl": "BucketOwnerFullControl"
            },
            "DeletionPolicy" : "Retain"
        }
    },
    "Outputs": {
        "ELBURL": {
            "Description": "Wokload Getting Started URL",
            "Value": {
                "Fn::Join" : ["", ["http://",
                    { "Fn::GetAtt": [
                        "WorkloadInstance",
                        "PublicDnsName"
                    ]
                    }
                ]] },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-URL"
                }
            }
        }
    }
}